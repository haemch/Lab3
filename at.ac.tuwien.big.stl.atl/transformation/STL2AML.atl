-- @path AML=/at.ac.tuwien.big.stl.atl/metamodels/CAEX.ecore
-- @path STL=/at.ac.tuwien.big.stl.atl/metamodels/stl.ecore


module STL2AML;
create OUT: AML from IN: STL;

helper def : getAttribute(c: STL!Component, s: Set(AML!Attribute)) :Set(AML!Attribute) =
		s.including(AML!Attribute.newInstance().refSetValue('capacity', c.capacity.toString()));
	
rule SystemToCAEXFile {
	from 
		system : STL!System
	to 
		hirarchy: AML!InstanceHierarchy(
			name <- system.name,
			internalElement <- system.areas
			
		),
		caex_file : AML!CAEXFile(
			fileName <- system.name,
			instanceHierarchy <- hirarchy
		)
		
	
}

rule AreaToInternalElement {
	from 
		area : STL!Area
	to
		area_element : AML!InternalElement(
			name <- area.name,
			internalElement <- area.components
		)
}

rule ComponentToInternalElement{
	from 
		component : STL!Component
	to
		component_element : AML!InternalElement(
			name <- component.name,
			attribute <- if(component.oclIsTypeOf(STL!Store))then 
							thisModule.getAttribute(component,cost_attribute.asSet())
						 else
						 	cost_attribute
						endif
		),
		cost_attribute : AML!Attribute(
			name <- 'cost',
			value <- component.cost.toString()
		)
}

