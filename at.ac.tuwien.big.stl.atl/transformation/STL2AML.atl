-- @path AML=/at.ac.tuwien.big.stl.atl/metamodels/CAEX.ecore
-- @path STL=/at.ac.tuwien.big.stl.atl/metamodels/stl.ecore


module STL2AML;
create OUT: AML from IN: STL;


helper def: getCostAttribute(c:STL!Component) : AML!Attribute = 
AML!Attribute.newInstance().refSetValue('name','cost').refSetValue('value', c.cost.toString());

helper def: getCapacityAttribute(c:STL!Component) : AML!Attribute = 
AML!Attribute.newInstance().refSetValue('name','capacity').refSetValue('value', c.capacity.toString());

	
rule SystemToCAEXFile {
	from 
		system : STL!System
	to 
		hirarchy: AML!InstanceHierarchy(
			name <- system.name,
			internalElement <- system.areas
			
		),
		caex_file : AML!CAEXFile(
			fileName <- system.name,
			instanceHierarchy <- hirarchy
		)
		
	
}

rule AreaToInternalElement {
	from 
		area : STL!Area
	to
		area_element : AML!InternalElement(
			name <- area.name,
			internalElement <- area.components
		)
}


rule ComponentToInternalElement{
	from 
		component : STL!Component
	to
		component_element : AML!InternalElement(
			name <- component.name,
			attribute <- if(STL!Store.allInstances().includes(component)) then
			Set{}.including(thisModule.getCapacityAttribute(component)).including(thisModule.getCostAttribute(component))
			else
			thisModule.getCostAttribute(component)
			endif,
			externalInterface <- component.inputSlots.union(component.outputSlots)
			
			
		)
}

rule SlotToExternalInterface{
	from
		slot : STL!Slot
	to
		external_interface : AML!ExternalInterface(
			name <- slot.name
		)
	
}



